motor = m0,m1,m2,m3 //모터 4개 가정, 즉 음료는 4종류의 조합으로 만들어짐
int 음료[4][2]; //
음료번호, 음료의 양을 의미.
[0     , -1]
[1     , -1]
[2     , -1]
[3     , -1]
음료의 양은 -1로 초기화. 즉 음료의 양이 -1이라면 제작하지 않는것.
어플리케이션으로부터 음료번호와 뽑을 양을 전달받음.
음료 4가지 a,b,c,d 중 a를 20, d를 50만큼 뽑으라고 전달받았다 가정.
음료에는 다음과 같은 값이 저장됨
[0,20]
[1,-1]
[2,-1]
[3,50]

정렬은 음료의 양 순으로 오름차순 정렬.
즉 음료는 아래와 같이 정렬됨
[1,-1]
[2,-1]
[0,20]
[3,50]
맨 앞에서부터 key값을 하나씩 올리면서 -1이 아닌 값을 만날때까지 반복
위 예제의 경우 key값은 2가 됨.
key값부터 음료 제작을 시작하며
위 예제의 경우 음료를 제작할 때는 음료[2][1]값과 [3][1]값만 사용되게 됨.

for( (총 음료 가짓수 - key)번 반복) {
    key값부터 시작해 모터 가동
}
위 예제의 경우 0번모터와 3번모터 가동.
이후 [0,20]값을 토대로
delay(1)을 20번 반복 후 0번모터 디태치,
이후 [3,50]값을 토대로
delay(1)을 50-20번 반복 후 3번모터 디태치
최적화된 시간으로 음료 제작 가능하게 됨

아래는 수도코드

int before; //이전 음료의 양을 판단하기 위함
int key;
int drink[4][2];
int i;
for(i = 0; i < 4; i++) //drink 초기화
{
    drink[i][0] = i;
    drink[i][1] = -1;
}

//블루투스통신으로 추출 할 값 전달받기 
//전달받은 음료 양 정렬

void key_setting() {
    for(i = 0; i < 4; i++) {
        if(drink[i][1] == -1) key++;
        else return;
    }
}

void attach() {
    for(i = 0; i < 4-key; i++) {
        switch (drink[key+i][0]) {
            case 0:
                //mt0 attach
                break;
            case 1:
                //mt1 attach
                break;
            case 2:
                //mt2 attach
                break;
            case 3:
                //mt3 attach
                break;
        }
    }
}

//delay(1)에 1ml 나온다고 가정. 
before = 0;
void make_drink() {
    for (i = 0; i < 4-key; i++) {
        for(int j = 0; j < drink[key+i][1] - before; j++) {
            delay(1);
        }
        before = before + drink[key+i];
    }
}